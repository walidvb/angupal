// Generated by CoffeeScript 1.6.2
(function() {
  console.log(base_path);

  angular.module('myApp').filter('notFirst', function() {
    return function(input) {
      var array, i;

      if (input && input !== "undefined") {
        array = new Array();
        i = 1;
        while (i < input.length) {
          array.push(input[i]);
          i++;
        }
        return array;
      }
    };
  }).filter('first', function() {
    return function(input) {
      if (input && input !== "undefined") {
        return input[0];
      }
    };
  }).directive("myProject", [
    function() {
      return {
        scope: {
          project: "=myProject"
        },
        templateUrl: base_path + "views/project.html",
        replace: true
      };
    }
  ]).directive('myMultipage', [
    '$timeout', function($timeout) {
      return {
        priority: 300,
        controller: function($scope) {
          var goTo;

          $scope.next = function() {
            return goTo('next');
          };
          $scope.prev = function() {
            return goTo('prev');
          };
          return goTo = function(direction) {
            var h, newOffset, page;

            h = $scope.page.height();
            console.log('page', $scope.page);
            newOffset = direction === 'next' ? $scope.pageOffset - h : $scope.pageOffset + h;
            page = $scope.page.find('.html-content');
            console.log('newOffset', newOffset, 'h', h, 'page.height', page.height());
            if (newOffset > 0) {
              newOffset = 0;
              return;
            }
            if (-newOffset > page.height()) {
              newOffset = $scope.pageOffset;
              return;
            }
            page.animate({
              'opacity': 0
            }, 'ease-out', function() {
              $(this).css({
                '-webkit-transform': 'translateY(' + newOffset + 'px)',
                '-moz-transform': 'translateY(' + newOffset + 'px)',
                'transform': 'translateY(' + newOffset + 'px)'
              });
              return page.stop().animate({
                'opacity': 1
              }, 'ease-out');
            });
            $scope.pageOffset = newOffset;
            return $scope.pageIndex = direction === 'next' ? $scope.pageIndex + 1 : $scope.pageIndex - 1;
          };
        },
        link: function(scope, elm, attrs) {
          var controls, next, prev;

          scope.page = angular.element(elm);
          console.log('page height', scope.page.height(), 'content height', scope.page.find('.html-content').height());
          console.log(scope.page.find('.html-content'));
          if (scope.page.height() <= scope.page.find('.html-content').height()) {
            scope.pageIndex = null;
            return;
          }
          next = angular.element('<div class="control next"/>').text('+').bind('click', function() {
            return scope.next();
          });
          prev = angular.element('<div class="control prev"/>').text('-').bind('click', function() {
            return scope.prev();
          });
          controls = angular.element('<div class="page-controls">').append(prev).append(next);
          angular.element(elm).append(controls);
          scope.controls = {
            prev: prev,
            next: next
          };
          scope.pageOffset = 0;
          return scope.pageIndex = 0;
        }
      };
    }
  ]).directive("myBio", [
    function() {
      return {
        scope: {
          bio: "=myBio"
        },
        templateUrl: base_path + "views/bio.html"
      };
    }
  ]).directive("swiper", [
    '$timeout', function($timeout) {
      return {
        priority: 500,
        transclude: false,
        link: function(scope, elem, attrs) {
          return $timeout(function() {
            var $this, initialState, options, pagination;

            $this = angular.element(elem);
            options = {
              mousewheelControl: true,
              mousewheelControlForceToAxis: true,
              keyboardControl: true,
              resizeReInit: true,
              grabCursor: true
            };
            if (attrs.swiper === 'vert') {
              initialState = true;
              pagination = $('<div class="vert-pagination"/>');
              scope.swipers.vertPagination = pagination;
              angular.element('.pagination-wrapper').prepend(pagination);
              options.slideClass = 'slide-vert';
              options.mode = 'vertical';
              options.pagination = '.vert-pagination';
              options.paginationElement = 'div';
              options.paginationElementClass = 'vert-pager';
              options.paginationActiveClass = 'active';
              options.paginationVisibleClass = 'visible';
              options.paginationClickable = true;
              options.initialSlide = 0;
              options.onSwiperCreated = function(swiper) {
                angular.element('.vert-pagination').css('marginTop', -pagination.height() / 2);
                return scope.initPagers();
              };
              options.onSlideChangeStart = function(swiper, direction) {
                angular.element('body').removeClass('initial-state');
                pagination.removeClass('faded');
                return scope.initPagers();
              };
              options.onSlideChangeEnd = function(swiper, direction) {
                if (initialState) {
                  swiper.removeSlide(0);
                  swiper.swipeTo(0, 0, false);
                  angular.element('body').addClass('ready-state');
                  initialState = false;
                }
                return scope.initPagers();
              };
              scope.swipers.vertical = $this.swiper(options);
              return;
            } else {
              options.slideClass = 'slide-horz';
              options.onSlideChangeStart = function() {
                return angular.element('.vert-pagination').addClass('faded');
              };
            }
            if (attrs.id === 'bio') {
              if (window.innerWidth > 767) {
                options.slidesPerView = 2;
              }
            }
            return $this.swiper(options);
          }, 1000);
        }
      };
    }
  ]);

}).call(this);
