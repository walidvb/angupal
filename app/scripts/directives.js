// Generated by CoffeeScript 1.6.2
(function() {
  angular.module('myApp').filter('trust', function($sce) {
    return function(input) {
      return $sce.trustAsHtml(input);
    };
  }).filter('notFirst', function() {
    return function(input) {
      var array, i;

      if (input && input !== "undefined") {
        array = new Array();
        i = 1;
        while (i < input.length) {
          array.push(input[i++]);
        }
        return array;
      }
    };
  }).filter('first', function() {
    return function(input) {
      if (input && input !== "undefined") {
        return input[0];
      }
    };
  }).directive("myProject", [
    function() {
      return {
        scope: {
          project: "=myProject"
        },
        templateUrl: "views/project.html",
        replace: true
      };
    }
  ]).directive('myPager', [
    '$timeout', '$compile', function($timeout, $compile) {
      return {
        restrict: 'E',
        priority: 0,
        transclude: true,
        replace: true,
        template: '<div class="page-controls swiper-no-swiping">' + '<div class="control prev">&uarr;</div>' + '<div class="control next">&darr;</div>' + '</div>',
        terminal: true,
        link: function(scope, elem, attrs) {
          scope.checkPagers = function() {
            var content, contentHeight, pageHeight, parent;

            parent = elem.parents('.slide-text-wrapper');
            content = parent.children('.text-body');
            pageHeight = parent.height();
            contentHeight = content.height();
            if (contentHeight < pageHeight) {
              return elem.fadeOut();
            } else {
              return elem.fadeIn();
            }
          };
          scope.goTo = function(dir, pager) {
            var content, contentHeight, currentOffset, newOffset, pageHeight, parent;

            parent = pager.parents('.slide-text-wrapper');
            content = parent.children('.text-body');
            pageHeight = parent.height();
            contentHeight = content.height();
            currentOffset = parseInt(content.css('top'));
            newOffset = currentOffset + dir * pageHeight - 10;
            newOffset = Math.min(0, Math.max(newOffset, pageHeight - (contentHeight + 15)));
            if (newOffset !== currentOffset) {
              content.animate({
                'top': newOffset
              });
            }
            return console.log('scope.goTo ' + dir, 'newOffset', newOffset, 'currentOffset', currentOffset);
          };
          return $timeout(function() {
            $(window).resize(function() {
              return scope.checkPagers();
            });
            setTimeout(function() {
              return scope.checkPagers();
            }, 2000);
            return angular.element('.control:not(.processed)').addClass('processed').click(function() {
              if ($(this).hasClass('next')) {
                return scope.goTo(-1, $(this));
              } else {
                return scope.goTo(1, $(this));
              }
            });
          }, 1000);
        }
      };
    }
  ]).directive("myInfo", [
    function() {
      return {
        transclude: false,
        replace: false,
        scope: {
          info: "=myInfo"
        },
        templateUrl: "views/info.html"
      };
    }
  ]).directive("myBios", [
    function() {
      return {
        priority: 100,
        scope: {
          bios: "=myBios"
        },
        templateUrl: "views/bio.html"
      };
    }
  ]);

}).call(this);
