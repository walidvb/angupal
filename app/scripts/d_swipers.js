// Generated by CoffeeScript 1.6.2
(function() {
  angular.module('myApp').directive('swiperCtrl', function() {
    var mySwiper, obj;

    mySwiper = new Array;
    obj = {
      priority: 1000,
      controller: function($scope, $attrs, $timeout) {
        var $this;

        $this = this;
        $this.initialState = true;
        $this.initPagers = function() {
          var $item, i, icon, item, pager, pagers, pagination, slideIcons, slideNames, title, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;

          slideNames = new Array;
          _ref = angular.element('.slide-vert');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pager = _ref[_i];
            slideNames.push(pager.attributes['data-name'].value);
          }
          slideIcons = new Array;
          _ref1 = angular.element('.slide-vert');
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            pager = _ref1[_j];
            slideIcons.push(pager.attributes['data-icon'].value);
          }
          pagination = angular.element('.vert-pagination');
          pagers = pagination.find('div.vert-pager');
          _results = [];
          for (i = _k = 0, _len2 = pagers.length; _k < _len2; i = ++_k) {
            item = pagers[i];
            title = $item = angular.element(item);
            icon = {
              img: angular.element('<img class="icon" src="' + slideIcons[i] + '"/>'),
              item: $item
            };
            $item.attr('data-title', slideNames[i]).append(icon.img);
            _results.push($item.bind('click', function() {
              console.log(this);
              return this.click();
            }));
          }
          return _results;
        };
        $this.ready = function() {
          var $thisSwiper, options, pagination;

          console.log('mySwiper', mySwiper);
          $thisSwiper = $attrs.$$element;
          options = {
            mousewheelControl: true,
            mousewheelControlForceToAxis: true,
            keyboardControl: true,
            resizeReInit: true,
            grabCursor: true,
            longSwipesRatio: 0.1
          };
          if ($attrs.swiperCtrl === 'vert') {
            pagination = $('<div class="vert-pagination"/>');
            $scope.swipers.vertPagination = pagination;
            angular.element('.pagination-wrapper').prepend(pagination);
            options.slideClass = 'slide-vert';
            options.mode = 'vertical';
            options.pagination = '.vert-pagination';
            options.paginationElement = 'div';
            options.paginationElementClass = 'vert-pager';
            options.paginationActiveClass = 'active';
            options.paginationVisibleClass = 'visible';
            options.paginationClickable = true;
            options.initialSlide = 0;
            options.onSwiperCreated = function(swiper) {
              return angular.element('.vert-pagination').css('marginTop', -pagination.height() / 2);
            };
            options.onSlideChangeStart = function(swiper, direction) {
              angular.element('body').removeClass('initial-state');
              return pagination.removeClass('faded');
            };
            options.onSlideChangeEnd = function(swiper, direction) {
              if ($this.initialState) {
                swiper.removeSlide(0);
                swiper.swipeTo(0, 0, false);
                angular.element('body').addClass('ready-state');
                $this.initialState = false;
                swiper.reInit();
                return $this.initPagers();
              }
            };
            return $timeout(function() {
              mySwiper.push($thisSwiper.swiper(options));
              return $this.initPagers();
            });
          } else {
            options.slideClass = 'slide-horz';
            options.onSlideClicka = function(swiper) {
              return swiper.swipeNext();
            };
            options.aonSlideToucha = function(swiper) {
              return swiper.swipeNext();
            };
            options.aonSlideChangeStart = function(swiper, direction) {};
            options.loop = true;
            if ($attrs.id === 'bio' && window.innerWidth > 767) {
              options.slidesPerView = 2;
            }
            return $timeout(function() {
              return mySwiper.push($thisSwiper.swiper(options));
            });
          }
        };
        return $this;
      }
    };
    return obj;
  }).directive('swiperSlide', function() {
    var dirobj;

    dirobj = {
      require: '^swiperCtrl',
      compile: function() {
        return {
          post: function(scope, elem, attrs, swiperCtrl) {
            if (scope.$last || attrs.swiperSlide === 'last') {
              return swiperCtrl.ready();
            }
          }
        };
      }
    };
    return dirobj;
  });

}).call(this);
